-- VHDL Entity my_project4_lib.mystd.interface
--
-- Created:
--          by - Omark.UNKNOWN (DESKTOP-16BG4K6)
--          at - 11:45:42 05/24/2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY mystd IS
   PORT( 
      clk  : IN     std_logic;
      rst  : IN     std_logic;
      wave : OUT    std_logic;
      tclk : BUFFER integer RANGE 0 TO 15
   );

-- Declarations

END mystd ;

--
-- VHDL Architecture my_project4_lib.mystd.fsm
--
-- Created:
--          by - Omark.UNKNOWN (DESKTOP-16BG4K6)
--          at - 11:45:43 05/24/2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF mystd IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      tclk
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (tclk = 8) THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (tclk = 10) THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            next_state <= s2;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state,
      tclk
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            wave <= '0';
            tclk <= tclk + 1;
            IF (tclk = 8) THEN 
               wave <= '1';
            END IF;
         WHEN s1 => 
            tclk <= tclk +1;
            IF (tclk = 10) THEN 
               wave <= '0';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
